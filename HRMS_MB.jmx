<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="HRMS MB APIs">
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="APIs">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Sign Up">
          <stringProp name="TestPlan.comments">Sign up CSV//users.csv</stringProp>
          <stringProp name="HTTPSampler.domain">hrms.modulobytes.com</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">hrms/api/user/signup</stringProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;firstName&quot;: &quot;${firstName}&quot;,&#xd;
  &quot;middleName&quot;: &quot;${middleName}&quot;,&#xd;
  &quot;lastName&quot;: &quot;${lastName}&quot;,&#xd;
  &quot;email&quot;: &quot;${dynamicEmail}&quot;,&#xd;
  &quot;countryCode&quot;: &quot;${countryCode}&quot;,&#xd;
  &quot;phoneNumber&quot;: &quot;${dynamicPhone}&quot;,&#xd;
  &quot;dateOfBirth&quot;: &quot;${dateOfBirth}&quot;,&#xd;
  &quot;password&quot;: &quot;${password}&quot;,&#xd;
  &quot;confirmPassword&quot;: &quot;${confirmPassword}&quot;&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor User Sign Up " enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.nio.charset.StandardCharsets
import java.util.Random

// --- Load CSV using Universal Loader ---

def loadCsv = props.get(&quot;universalCsvLoader&quot;)
if (loadCsv == null) {
    throw new IllegalStateException(&quot;Universal CSV Loader not found! Did you add the init JSR223 Sampler?&quot;)
}
def cols = loadCsv(&quot;users.csv&quot;)
//def cols = userRow

// --- Assign CSV values with defaults ---
def firstName       = cols[0] ?: &quot;DefaultFirst&quot;
def middleName      = cols[1] ?: &quot;&quot;
def lastName        = cols[2] ?: &quot;DefaultLast&quot;
def emailPrefix     = cols[3] ?: &quot;user&quot;
def countryCode     = cols[4] ?: &quot;+91&quot;
def phoneNumber     = cols[5] ?: &quot;9876500000&quot;
def dateOfBirth     = cols[6] ?: &quot;2000-01-01&quot;
def password        = cols[7] ?: &quot;Password@123&quot;
def confirmPassword = cols[8] ?: password
def industryType = (cols.size() &gt; 9 ? cols[9] : &quot;GENERAL&quot;)

// --- Dynamic data ---
def timestamp = new Date().format(&quot;yyyyMMddHHmmss&quot;, TimeZone.getTimeZone(&quot;Asia/Kolkata&quot;))
def random = (1000 + new Random().nextInt(9000)).toString()

def dynamicEmail = &quot;${emailPrefix}_${timestamp}_${random}@example.com&quot;

def basePhone = vars.get(&quot;phoneNumber&quot;) ?: &quot;9876500000&quot;
def phonePrefix = basePhone.length() &gt;= 6 ? basePhone.substring(0, 6) : &quot;98765&quot;
def dynamicPhone = phonePrefix + random
//vars.put(&quot;dynamicPhone&quot;, phonePrefix + random)

// --- Put into JMeter vars ---
vars.put(&quot;firstName&quot;, firstName)
vars.put(&quot;middleName&quot;, middleName)
vars.put(&quot;lastName&quot;, lastName)
vars.put(&quot;emailPrefix&quot;, emailPrefix)
vars.put(&quot;countryCode&quot;, countryCode)
vars.put(&quot;phoneNumber&quot;, phoneNumber)
vars.put(&quot;dateOfBirth&quot;, dateOfBirth)
vars.put(&quot;password&quot;, password)
vars.put(&quot;confirmPassword&quot;, confirmPassword)
vars.put(&quot;industryType&quot;, industryType)

vars.put(&quot;dynamicEmail&quot;, dynamicEmail)
vars.put(&quot;dynamicPhone&quot;, dynamicPhone)

// --- Debug log ---
log.info(&quot;‚úÖ Loaded user: ${firstName} ${lastName}, Email=${dynamicEmail}, Phone=${dynamicPhone}&quot;)</stringProp>
            <stringProp name="TestPlan.comments">using Universal CSV Loader </stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Login">
          <stringProp name="TestPlan.comments">Sign up CSV//users.csv</stringProp>
          <stringProp name="HTTPSampler.domain">hrms.modulobytes.com</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">hrms/api/user/login</stringProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;email&quot;: &quot;${dynamicEmail}&quot;,&#xd;
  &quot;password&quot;: &quot;${password}&quot;&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor  User Login" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.jmeter.protocol.http.sampler.HTTPSamplerProxy
import org.apache.jmeter.protocol.http.control.HeaderManager
import org.apache.jmeter.protocol.http.control.Header
import groovy.json.JsonSlurper

// ============================================================
// üîπ Use Universal CSV Loader
// ============================================================

// load one row from users.csv
//def cols = loadCsvRow(&quot;users.csv&quot;, &quot;usersCsvRowIndex&quot;)
def loadCsv = props.get(&quot;universalCsvLoader&quot;)
if (loadCsv == null) {
    throw new IllegalStateException(&quot;Universal CSV Loader not found! Did you add the init JSR223 Sampler?&quot;)
}
def cols = loadCsv(&quot;users.csv&quot;)

def emailPrefix = cols[3] ?: &quot;testuser&quot;
def password    = cols[7] ?: &quot;Password@123&quot;
def email       = emailPrefix + &quot;@example.com&quot;

// üîë Get domain from Jenkins parameter (fallback = localhost)
def domain = props.get(&quot;domain&quot;) ?: &quot;localhost&quot;
vars.put(&quot;domain&quot;, domain)

// üîë Retrieve existing token
def jwtToken = vars.get(&quot;authToken&quot;)

if (!jwtToken || jwtToken.trim().isEmpty()) {
    log.warn(&quot;‚ö†Ô∏è JWT Token is missing or expired! Fetching new one for user: ${email}...&quot;)

    try {
        // ‚úÖ API details
        def loginEndpoint = &quot;/hrms/api/user/login&quot;

        // ‚úÖ Create HTTP Sampler for login request
        def sampler = new HTTPSamplerProxy()
        sampler.setDomain(domain)
        sampler.setProtocol(&quot;https&quot;)
        sampler.setPath(loginEndpoint)
        sampler.setMethod(&quot;POST&quot;)
        sampler.setPostBodyRaw(true)

        // ‚úÖ Request body from CSV
        def bodyData = &quot;&quot;&quot;{&quot;email&quot;:&quot;${email}&quot;, &quot;password&quot;:&quot;${password}&quot;}&quot;&quot;&quot;
        sampler.addNonEncodedArgument(&quot;&quot;, bodyData, &quot;&quot;)

        // ‚úÖ Headers
        def headerManager = new HeaderManager()
        headerManager.add(new Header(&quot;Content-Type&quot;, &quot;application/json&quot;))
        sampler.setHeaderManager(headerManager)

        // ‚úÖ Execute login
        def sampleResult = sampler.sample()
        def responseBody = sampleResult.getResponseDataAsString()
        def responseCode = sampleResult.getResponseCode()

        log.info(&quot;üîπ Login API Response Code: &quot; + responseCode)
        log.info(&quot;üîπ Login API Response: &quot; + responseBody)

        if (responseCode == &quot;200&quot; &amp;&amp; responseBody?.trim()) {
            def jsonResponse = new JsonSlurper().parseText(responseBody)

            // ‚úÖ Extract token
            def newToken = jsonResponse?.token ?: jsonResponse?.jwtToken ?: jsonResponse?.access_token

            if (newToken) {
                vars.put(&quot;authToken&quot;, newToken)
                log.info(&quot;‚úÖ New JWT Token obtained: &quot; + newToken)
            } else {
                log.error(&quot;‚ùå JWT Token missing in response! Check API JSON.&quot;)
            }
        } else {
            log.error(&quot;‚ùå Login API failed! Status Code: &quot; + responseCode)
        }
    } catch (Exception e) {
        log.error(&quot;üö® Error retrieving JWT Token: &quot; + e.getMessage(), e)
    }
} else {
    log.info(&quot;üîπ Using existing JWT Token: &quot; + jwtToken)
}

// ‚úÖ Final check
def storedToken = vars.get(&quot;authToken&quot;)
if (!storedToken || storedToken.trim().isEmpty()) {
    log.error(&quot;üö® JWT Token is STILL missing after login attempt!&quot;)
} else {
    log.info(&quot;üîπ Final Stored JWT Token: &quot; + storedToken)
}
</stringProp>
            <stringProp name="TestPlan.comments">using Universal CSV Loader</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">jwtToken</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.jwtToken</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NO_TOKEN_FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Company Register post">
          <stringProp name="TestPlan.comments">Sign up CSV//users.csv</stringProp>
          <stringProp name="HTTPSampler.domain">hrms.modulobytes.com</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">hrms/api/company/register</stringProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;companyName&quot;: &quot;${companyName}&quot;,&#xd;
  &quot;companyEmail&quot;: &quot;${companyEmail}&quot;,&#xd;
  &quot;industryType&quot;: &quot;${industryType}&quot;,&#xd;
  &quot;companyWebsite&quot;: &quot;${companyWebsite}&quot;,&#xd;
  &quot;companySize&quot;: &quot;${companySize}&quot;&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${jwtToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor Company Register post" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.util.UUID
import java.util.Random

// --- Load CSV using Universal Loader ---

def loadCsv = props.get(&quot;universalCsvLoader&quot;)
if (loadCsv == null) {
    throw new IllegalStateException(&quot;Universal CSV Loader not found! Did you add the init JSR223 Sampler?&quot;)
}
def cols = loadCsv(&quot;users.csv&quot;)

// --- Assign CSV values with defaults ---
def firstName       = cols[0] ?: &quot;DefaultFirst&quot;
def middleName      = cols[1] ?: &quot;&quot;
def lastName        = cols[2] ?: &quot;DefaultLast&quot;
def emailPrefix     = cols[3] ?: &quot;user&quot;
def countryCode     = cols[4] ?: &quot;+91&quot;
def phoneNumber     = cols[5] ?: &quot;9876500000&quot;
def dateOfBirth     = cols[6] ?: &quot;2000-01-01&quot;
def password        = cols[7] ?: &quot;Password@123&quot;
def confirmPassword = cols[8] ?: password
def industryType    = cols[9] ?: &quot;TECHNOLOGY&quot;

// --- Generate unique ID for company ---
def uniqueID = UUID.randomUUID().toString().substring(0, 8)

// --- Company Data ---
def companyName   = &quot;Company_&quot; + firstName + &quot;_&quot; + uniqueID
def companyEmail  = (emailPrefix ?: &quot;user&quot;) + &quot;_&quot; + uniqueID + &quot;@example.com&quot;

def validIndustries = [&quot;INFORMATION_TECHNOLOGY&quot;, &quot;BANKING_FINANCIAL_SERVICES&quot;, &quot;MANUFACTURING&quot;, &quot;CONSULTING&quot;]
def finalIndustry   = validIndustries.contains(industryType.toUpperCase().replace(&quot; &quot;, &quot;_&quot;)) 
                        ? industryType 
                        : validIndustries[new Random().nextInt(validIndustries.size())]

def companyDomain  = &quot;company&quot; + uniqueID
def companyWebsite = &quot;https://www.&quot; + companyDomain + &quot;.com&quot;
def companySize    = (10..500).toList().get(new Random().nextInt(491)).toString()

// --- Domain from Jenkins Parameter ---
def domain = vars.get(&quot;DOMAIN&quot;) ?: &quot;localhost&quot;

// --- Store all variables in JMeter ---
vars.put(&quot;firstName&quot;, firstName)
vars.put(&quot;middleName&quot;, middleName)
vars.put(&quot;lastName&quot;, lastName)
vars.put(&quot;emailPrefix&quot;, emailPrefix)
vars.put(&quot;countryCode&quot;, countryCode)
vars.put(&quot;phoneNumber&quot;, phoneNumber)
vars.put(&quot;dateOfBirth&quot;, dateOfBirth)
vars.put(&quot;password&quot;, password)
vars.put(&quot;confirmPassword&quot;, confirmPassword)
vars.put(&quot;industryType&quot;, finalIndustry)

vars.put(&quot;companyName&quot;, companyName)
vars.put(&quot;companyEmail&quot;, companyEmail)
vars.put(&quot;companyWebsite&quot;, companyWebsite)
vars.put(&quot;companySize&quot;, companySize)

// --- Add domain for API requests ---
vars.put(&quot;domain&quot;, domain)

// --- Debug Logging ---
log.info(&quot;‚úÖ Loaded user: ${firstName} ${lastName}, Email=${companyEmail}, Industry=${finalIndustry}&quot;)
</stringProp>
            <stringProp name="TestPlan.comments">using Universal CSV Loader</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Company Id Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">companyId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.companyId </stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND </stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Refersh Token">
          <stringProp name="HTTPSampler.domain">hrms.modulobytes.com</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">hrms/api/user/login</stringProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;email&quot;: &quot;${dynamicEmail}&quot;,&#xd;
  &quot;password&quot;: &quot;${password}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${jwtToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Refresh token Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">jwtToken</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.jwtToken</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User-ID get">
          <stringProp name="HTTPSampler.domain">hrms.modulobytes.com</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">hrms/api/user</stringProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${jwtToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Company register get">
          <stringProp name="TestPlan.comments">No CSV</stringProp>
          <stringProp name="HTTPSampler.domain">hrms.modulobytes.com</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">hrms/api/company</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${jwtToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Company register update">
          <stringProp name="TestPlan.comments">Sign up CSV</stringProp>
          <stringProp name="HTTPSampler.domain">hrms.modulobytes.com</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/hrms/api/company</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
        &quot;companyName&quot;: &quot;Tech Innovators Inc.&quot;,&#xd;
        &quot;companyWebsite&quot;: &quot;&quot;,&#xd;
        &quot;companySize&quot;: &quot;100&quot;,&#xd;
        &quot;industryType&quot;: &quot;&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${jwtToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="All industry get">
          <stringProp name="TestPlan.comments">Sign up CSV</stringProp>
          <stringProp name="HTTPSampler.domain">hrms.modulobytes.com</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">hrms/api/company/industry-types</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${jwtToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Company Location post">
          <stringProp name="TestPlan.comments">No CSV</stringProp>
          <stringProp name="HTTPSampler.domain">hrms.modulobytes.com</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/hrms/api/locations</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${companyAddressRequestBody}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${jwtToken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">companyId</stringProp>
                <stringProp name="Header.value">${companyId}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor Company Location post">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.util.UUID

def loadCsv = props.get(&quot;universalCsvLoader&quot;)
if (loadCsv == null) {
    throw new IllegalStateException(&quot;Universal CSV Loader not found! Did you add the init JSR223 Sampler?&quot;)
}
def cols = loadCsv(&quot;address.csv&quot;)  // returns ArrayList&lt;String&gt;

log.info(&quot;üìå CSV Row Loaded: &quot; + cols.toString())

// Helper
def fallback = { val, fallbackVal -&gt; (val != null &amp;&amp; !val.trim().isEmpty()) ? val : fallbackVal }

// Assign using indexes
def addressLine1 = fallback(cols[0], &quot;Default Street&quot;)
def addressLine2 = fallback(cols[1], &quot;&quot;)
def landmark     = fallback(cols[2], &quot;&quot;)
def postalCode   = fallback(cols[3], &quot;000000&quot;)
def cityId       = fallback(cols[4], &quot;100001&quot;)
def stateId      = fallback(cols[5], &quot;4014&quot;)
def countryId    = fallback(cols[6], &quot;101&quot;)

def companyNameLoc  = fallback(cols[7], &quot;Default Name&quot;)
def locationCode = fallback(cols[8], &quot;HO-&quot; + UUID.randomUUID().toString().substring(0, 8).toUpperCase())
def timeZoneId   = fallback(cols[9], &quot;617&quot;)
def groupEmail   = fallback(cols[10], &quot;hr@company.com&quot;)
def longitude    = fallback(cols[11], &quot;77.44585346779&quot;)
def latitude     = fallback(cols[12], &quot;12.98943459786&quot;)

// Build JSON
def requestBody = &quot;&quot;&quot;
{
  &quot;addressesRequestDto&quot;: {
    &quot;addressLine1&quot;: &quot;${addressLine1}&quot;,
    &quot;addressLine2&quot;: &quot;${addressLine2}&quot;,
    &quot;landmark&quot;: &quot;${landmark}&quot;,
    &quot;postalCode&quot;: &quot;${postalCode}&quot;,
    &quot;cityId&quot;: ${cityId},
    &quot;stateId&quot;: ${stateId},
    &quot;countryId&quot;: ${countryId}
  },
  &quot;name&quot;: &quot;${companyNameLoc}&quot;,
  &quot;locationCode&quot;: &quot;${locationCode}&quot;,
  &quot;timeZoneId&quot;: &quot;${timeZoneId}&quot;,
  &quot;groupEmail&quot;: &quot;${groupEmail}&quot;,
  &quot;longitude&quot;: ${longitude},
  &quot;latitude&quot;: ${latitude}
}
&quot;&quot;&quot;

vars.put(&quot;companyAddressRequestBody&quot;, requestBody)
log.info(&quot;‚úÖ companyAddressRequestBody: ${requestBody}&quot;)
</stringProp>
            <stringProp name="TestPlan.comments">using address csv</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Company location PreProcessor" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.util.UUID

def fallback = { val, fallbackVal -&gt; (val != null &amp;&amp; !val.trim().isEmpty()) ? val : fallbackVal }

//def companyId = fallback(vars.get(&quot;companyId&quot;), String.valueOf(1000 + new Random().nextInt(9000)))
def name = fallback(vars.get(&quot;name&quot;), &quot;Default Name&quot;)
def locationCode = fallback(vars.get(&quot;locationCode&quot;), &quot;HO-&quot; + UUID.randomUUID().toString().substring(0, 8).toUpperCase())
def timeZoneId = fallback(vars.get(&quot;timeZoneId&quot;), &quot;617&quot;)
def groupEmail = fallback(vars.get(&quot;groupEmail&quot;), &quot;hr@company.com&quot;)
def longitude = fallback(vars.get(&quot;longitude&quot;), &quot;77.44585346779&quot;)
def latitude = fallback(vars.get(&quot;latitude&quot;), &quot;12.98943459786&quot;)

def addressLine1 = fallback(vars.get(&quot;addressLine1&quot;), &quot;Default Street&quot;)
def addressLine2 = fallback(vars.get(&quot;addressLine2&quot;), &quot;&quot;)
def landmark = fallback(vars.get(&quot;landmark&quot;), &quot;&quot;)
def postalCode = fallback(vars.get(&quot;postalCode&quot;), &quot;000000&quot;)
def cityId = fallback(vars.get(&quot;cityId&quot;), &quot;100001&quot;)
def stateId = fallback(vars.get(&quot;stateId&quot;), &quot;4014&quot;)
def countryId = fallback(vars.get(&quot;countryId&quot;), &quot;101&quot;)

def requestBody = &quot;&quot;&quot;
{
  &quot;addressesRequestDto&quot;: {
    &quot;addressLine1&quot;: &quot;${addressLine1}&quot;,
    &quot;addressLine2&quot;: &quot;${addressLine2}&quot;,
    &quot;landmark&quot;: &quot;${landmark}&quot;,
    &quot;postalCode&quot;: &quot;${postalCode}&quot;,
    &quot;cityId&quot;: ${cityId},
    &quot;stateId&quot;: ${stateId},
    &quot;countryId&quot;: ${countryId}
  },
  &quot;name&quot;: &quot;${name}&quot;,
  &quot;locationCode&quot;: &quot;${locationCode}&quot;,
  &quot;timeZoneId&quot;: &quot;${timeZoneId}&quot;,
  &quot;groupEmail&quot;: &quot;${groupEmail}&quot;,
  &quot;longitude&quot;: ${longitude},
  &quot;latitude&quot;: ${latitude}
}
&quot;&quot;&quot;

vars.put(&quot;companyAddressRequestBody&quot;, requestBody)
</stringProp>
            <stringProp name="TestPlan.comments">addressLine1,addressLine2,landmark,postalCode,cityId,stateId,countryId,name,locationCode,timeZoneId,groupEmail,longitude,latitude
Mukundpura Road,,Near Park,987656,132201,4014,101,Human Resources,HO-084893490,617,hr@company.com,77.44585346779,12.98943459786</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Company location Id Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">companyLocationId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Company Location get">
          <stringProp name="TestPlan.comments">No CSV</stringProp>
          <stringProp name="HTTPSampler.domain">hrms.modulobytes.com</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">hrms/api/locations</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${jwtToken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Company-ID</stringProp>
                <stringProp name="Header.value">${companyId}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Company Location put">
          <stringProp name="TestPlan.comments">No CSV</stringProp>
          <stringProp name="HTTPSampler.domain">hrms.modulobytes.com</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">hrms/api/locations/${companyLocationId}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${companyAddressPutBody}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${jwtToken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Company-ID</stringProp>
                <stringProp name="Header.value">${companyId}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Company location update PreProcessor" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonBuilder
import java.nio.charset.StandardCharsets
import java.util.Random

// From CSV
def name = vars.get(&quot;name&quot;)
def locationCode = vars.get(&quot;locationCode&quot;)
def addressLine1 = vars.get(&quot;addressLine1&quot;)
def addressLine2 = vars.get(&quot;addressLine2&quot;)
def landmark = vars.get(&quot;landmark&quot;)
def postalCode = vars.get(&quot;postalCode&quot;)
def cityId = vars.get(&quot;cityId&quot;)?.toInteger()
def stateId = vars.get(&quot;stateId&quot;)?.toInteger()
def countryId = vars.get(&quot;countryId&quot;)?.toInteger()
def timeZoneId = vars.get(&quot;timeZoneId&quot;)?.toInteger()
def groupEmail = vars.get(&quot;groupEmail&quot;)
def longitude = vars.get(&quot;longitude&quot;)?.toDouble()
def latitude = vars.get(&quot;latitude&quot;)?.toDouble()

// From JSON extractor
def locationId = vars.get(&quot;companyLocationId&quot;)

if (!locationId) {
    log.warn(&quot;‚ùå No companyLocationId found. Ensure POST + Extractor ran correctly.&quot;)
    return
}

// Build the request body
def requestBody = [
    addressesRequestDto: [
        addressLine1 : addressLine1,
        addressLine2 : addressLine2,
        landmark     : landmark,
        postalCode   : postalCode,
        cityId       : cityId,
        stateId      : stateId,
        countryId    : countryId
    ],
    name        : name,
    locationCode: locationCode,
    timeZoneId  : timeZoneId,
    groupEmail  : groupEmail,
    longitude   : longitude,
    latitude    : latitude
]

// Put in vars
vars.put(&quot;companyAddressPutBody&quot;, new JsonBuilder(requestBody).toPrettyString())
vars.put(&quot;companyPutUrl&quot;, &quot;/hrms/api/locations/${locationId}&quot;)
log.info(&quot;‚úÖ PUT Body:\n&quot; + vars.get(&quot;companyAddressPutBody&quot;))
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor Company Location put" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonBuilder

def loadCsv = props.get(&quot;universalCsvLoader&quot;)
if (loadCsv == null) {
    throw new IllegalStateException(&quot;Universal CSV Loader not found! Did you add the init JSR223 Sampler?&quot;)
}
def cols = loadCsv(&quot;address.csv&quot;)  // returns List&lt;String&gt;
log.info(&quot;üìå CSV Row Loaded: &quot; + cols.toString())

// Assign fields by index
def addressLine1  = cols[0]
def addressLine2  = cols[1]
def landmark      = cols[2]
def postalCode    = cols[3]
def cityId        = cols[4]?.toInteger()
def stateId       = cols[5]?.toInteger()
def countryId     = cols[6]?.toInteger()
def companyName   = cols[7]
def locationCode  = cols[8]
def timeZoneId    = cols[9]?.toInteger()
def groupEmail    = cols[10]
def longitude     = cols[11]?.toDouble()
def latitude      = cols[12]?.toDouble()

// From JSON extractor
def locationId = vars.get(&quot;companyLocationId&quot;)

if (!locationId) {
    log.warn(&quot;‚ùå No companyLocationId found. Ensure POST + Extractor ran correctly.&quot;)
    return
}

// Build JSON
def requestBody = [
    addressesRequestDto: [
        addressLine1 : addressLine1,
        addressLine2 : addressLine2,
        landmark     : landmark,
        postalCode   : postalCode,
        cityId       : cityId,
        stateId      : stateId,
        countryId    : countryId
    ],
    name        : companyName,
    locationCode: locationCode,
    timeZoneId  : timeZoneId,
    groupEmail  : groupEmail,
    longitude   : longitude,
    latitude    : latitude
]

vars.put(&quot;companyAddressPutBody&quot;, new JsonBuilder(requestBody).toPrettyString())
vars.put(&quot;companyPutUrl&quot;, &quot;/hrms/api/locations/${locationId}&quot;)

log.info(&quot;‚úÖ PUT Body:\n&quot; + vars.get(&quot;companyAddressPutBody&quot;))
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="clear CSV cache">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">// Only clear CSV cache if build passes parameter
def clearCache = vars.get(&quot;CLEAR_CSV_CACHE&quot;)?.toLowerCase() == &quot;true&quot;

if (clearCache) {
    if (props.get(&quot;universalCsvLoader&quot;) != null) {
        props.remove(&quot;universalCsvLoader&quot;)
        props.remove(&quot;__universalCsvLoaderInit&quot;)
        log.info(&quot;‚úÖ Universal CSV Loader cache cleared&quot;)
    } else {
        log.info(&quot;‚ÑπÔ∏è Universal CSV Loader not initialized yet&quot;)
    }
} else {
    log.info(&quot;‚ÑπÔ∏è Skipping CSV cache clear (CLEAR_CSV_CACHE=false)&quot;)
}
</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
      </hashTree>
      <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor Universal CSV Loader (Multi-CSV, Thread-Safe)">
        <stringProp name="scriptLanguage">groovy</stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="cacheKey">true</stringProp>
        <stringProp name="script">import org.apache.jmeter.services.FileServer
import org.apache.jmeter.util.JMeterUtils
import org.apache.commons.io.FileUtils
import java.nio.charset.StandardCharsets
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicInteger

// Check if we‚Äôre running in non-GUI mode (command line, Jenkins, etc.)
def isNonGui = Boolean.parseBoolean(JMeterUtils.getProperty(&quot;jmeterengine.nongui&quot;) ?: &quot;false&quot;)
log.debug(&quot;‚ÑπÔ∏è Running in Non-GUI mode? ${isNonGui}&quot;)

//def isNonGui = &quot;true&quot;.equalsIgnoreCase(JMeterUtils.getProp(&quot;jmeterengine.nongui&quot;))
if (props.get(&quot;__universalCsvLoaderInit&quot;) == null || isNonGui) {
    def csvRegistry = new ConcurrentHashMap&lt;String, Map&gt;()

    // Resolve baseDir once here (safe usage of FileServer)
    def baseDir = new File(FileServer.getFileServer().getBaseDir())

    def csvLoader = { String filename -&gt;
       // def file = new File(baseDir, &quot;csvs&quot; + File.separator + filename)
       def file = new File(new File(baseDir, &quot;csvs&quot;), filename)

        if (!file.exists()) {
            throw new FileNotFoundException(&quot;CSV file not found: ${file.absolutePath}&quot;)
        }

        if (!csvRegistry.containsKey(filename)) {
            def rows = FileUtils.readLines(file, StandardCharsets.UTF_8)
                .findAll { it.trim() &amp;&amp; !it.startsWith(&quot;#&quot;) }
                .drop(1) // skip header
                .collect { it.split(&quot;,&quot;)*.trim() }
            def counter = new AtomicInteger(0)
            csvRegistry.put(filename, [rows: rows, counter: counter])
            log.info(&quot;üìÇ Registered CSV: ${filename}, rows=${rows.size()}&quot;)
        }

        def entry = csvRegistry.get(filename)
        def index = entry.counter.getAndIncrement() % entry.rows.size()
        if (index &gt;= entry.rows.size()) {
    throw new IllegalStateException(&quot;CSV exhausted: ${filename}&quot;)
}
        vars.put(&quot;rowIndex&quot;, index.toString())
        return entry.rows[index]
    }

    props.put(&quot;universalCsvLoader&quot;, csvLoader)
    props.put(&quot;__universalCsvLoaderInit&quot;, &quot;true&quot;)

    log.info(&quot;‚úÖ Universal CSV Loader initialized. BaseDir=${baseDir.absolutePath}&quot;)
}
</stringProp>
      </JSR223PreProcessor>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
